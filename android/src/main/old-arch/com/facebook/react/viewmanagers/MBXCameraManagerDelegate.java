/**
* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GeneratePropsJavaDelegate.js
*/

package com.facebook.react.viewmanagers;

import android.view.View;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.DynamicFromObject;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

public class MBXCameraManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & MBXCameraManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
  public MBXCameraManagerDelegate(U viewManager) {
    super(viewManager);
  }
  @Override
  public void setProperty(T view, String propName, @Nullable Object value) {
    switch (propName) {
      case "maxBounds":
        mViewManager.setMaxBounds(view, value == null ? null : (String) value);
        break;
      case "animationDuration":
        mViewManager.setAnimationDuration(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "animationMode":
        mViewManager.setAnimationMode(view, value == null ? null : (String) value);
        break;
      case "defaultStop":
        mViewManager.setDefaultStop(view, (ReadableMap) value);
        break;
      case "userTrackingMode":
        mViewManager.setUserTrackingMode(view, value == null ? 0 : ((Double) value).intValue());
        break;
      case "followUserLocation":
        mViewManager.setFollowUserLocation(view, value == null ? false : (boolean) value);
        break;
      case "followUserMode":
        mViewManager.setFollowUserMode(view, value == null ? null : (String) value);
        break;
      case "followZoomLevel":
        mViewManager.setFollowZoomLevel(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "followPitch":
        mViewManager.setFollowPitch(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "followHeading":
        mViewManager.setFollowHeading(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "followPadding":
        mViewManager.setFollowPadding(view, new DynamicFromObject(value));
        break;
      case "zoomLevel":
        mViewManager.setZoomLevel(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "maxZoomLevel":
        mViewManager.setMaxZoomLevel(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "minZoomLevel":
        mViewManager.setMinZoomLevel(view, value == null ? 0f : ((Double) value).doubleValue());
        break;
      case "stop":
        mViewManager.setStop(view, (ReadableMap) value);
        break;
      default:
        super.setProperty(view, propName, value);
    }
  }
}
